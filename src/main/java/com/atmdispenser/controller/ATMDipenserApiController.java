package com.atmdispenser.controller;

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.atmdispenser.service.CurrencyDispenserService;
import com.atmdispenser.constant.Denomination;
import com.atmdispenser.vo.ATM;
import com.atmdispenser.vo.ErrorResponse;

/**
 *@author sumit
 *The RestController exposing APIs to withdraw money and show the remaining balance in the ATM
 *One exception hander (method) is also defined to handle the exceptions generated by the APIs.
 */
@RestController
@RequestMapping("/api/atm")
public class ATMDipenserApiController {

	public static final Logger logger = LoggerFactory
			.getLogger(ATMDipenserApiController.class);

	@Autowired
	private CurrencyDispenserService currencyDispenser;

	@Autowired
	private ATM atm;

	// ------------------- withdraw money--------------------

	@RequestMapping(value = "/{amount}", method = RequestMethod.GET)
	public ResponseEntity<?> withdraw(@PathVariable("amount") Integer amount)
			throws Exception {
		logger.info("Withdraw amount:", amount);
		Map<Denomination, Integer> dispersedCurrencies = currencyDispenser
				.dispense(amount);
		String dispersedAmountDetails;
		if (dispersedCurrencies != null && dispersedCurrencies.size() > 0) {
			dispersedAmountDetails = dispersedCurrencies.toString();
		} else {
			dispersedAmountDetails = "Denominations are available in the multiple of 50 & 20$ only and should not exceepd the bank limit";
		}

		return new ResponseEntity<String>(dispersedAmountDetails, HttpStatus.OK);
	}
	// ------------------- show remaining money--------------------
	@RequestMapping(value = "/", method = RequestMethod.GET)
	public ResponseEntity<?> showCurrentAvailableBankBalance() throws Exception {
		logger.info("Get current Bank balance");

		return new ResponseEntity<String>(currencyDispenser.getBalance()
				.toString(), HttpStatus.OK);

	}
	// ------------------- Exception handling for both the APIs--------------------
	@ExceptionHandler(Exception.class)
	public ResponseEntity<ErrorResponse> exceptionHandler(Exception ex) {
		ErrorResponse error = new ErrorResponse();
		error.setErrorCode(HttpStatus.INTERNAL_SERVER_ERROR.value());
		error.setErrorMessage(ex.getMessage());
		logger.error("Exception while api execution:", ex);
		return new ResponseEntity<ErrorResponse>(error, HttpStatus.OK);

	}

}
